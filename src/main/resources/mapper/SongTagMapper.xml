<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ebook.user.dao.SongTagMapper" >
  <resultMap id="BaseResultMap" type="com.ebook.user.model.SongTag" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="songId" property="songid" jdbcType="VARCHAR" />
    <result column="positive_prob" property="positiveProb" jdbcType="DOUBLE" />
    <result column="negative_prob" property="negativeProb" jdbcType="DOUBLE" />
    <result column="confidence" property="confidence" jdbcType="DOUBLE" />
    <result column="sentiment" property="sentiment" jdbcType="INTEGER" />
    <result column="tag" property="tag" jdbcType="VARCHAR" />
    <result column="hot" property="hot" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, songId, positive_prob, negative_prob, confidence, sentiment, tag, hot
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ebook.user.model.SongTagExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from song_tag
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from song_tag
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from song_tag
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ebook.user.model.SongTagExample" >
    delete from song_tag
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ebook.user.model.SongTag" >
    insert into song_tag (id, songId, positive_prob, 
      negative_prob, confidence, sentiment, 
      tag, hot)
    values (#{id,jdbcType=INTEGER}, #{songid,jdbcType=VARCHAR}, #{positiveProb,jdbcType=DOUBLE}, 
      #{negativeProb,jdbcType=DOUBLE}, #{confidence,jdbcType=DOUBLE}, #{sentiment,jdbcType=INTEGER}, 
      #{tag,jdbcType=VARCHAR}, #{hot,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.ebook.user.model.SongTag" >
    insert into song_tag
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="songid != null" >
        songId,
      </if>
      <if test="positiveProb != null" >
        positive_prob,
      </if>
      <if test="negativeProb != null" >
        negative_prob,
      </if>
      <if test="confidence != null" >
        confidence,
      </if>
      <if test="sentiment != null" >
        sentiment,
      </if>
      <if test="tag != null" >
        tag,
      </if>
      <if test="hot != null" >
        hot,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="songid != null" >
        #{songid,jdbcType=VARCHAR},
      </if>
      <if test="positiveProb != null" >
        #{positiveProb,jdbcType=DOUBLE},
      </if>
      <if test="negativeProb != null" >
        #{negativeProb,jdbcType=DOUBLE},
      </if>
      <if test="confidence != null" >
        #{confidence,jdbcType=DOUBLE},
      </if>
      <if test="sentiment != null" >
        #{sentiment,jdbcType=INTEGER},
      </if>
      <if test="tag != null" >
        #{tag,jdbcType=VARCHAR},
      </if>
      <if test="hot != null" >
        #{hot,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ebook.user.model.SongTagExample" resultType="java.lang.Integer" >
    select count(*) from song_tag
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update song_tag
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.songid != null" >
        songId = #{record.songid,jdbcType=VARCHAR},
      </if>
      <if test="record.positiveProb != null" >
        positive_prob = #{record.positiveProb,jdbcType=DOUBLE},
      </if>
      <if test="record.negativeProb != null" >
        negative_prob = #{record.negativeProb,jdbcType=DOUBLE},
      </if>
      <if test="record.confidence != null" >
        confidence = #{record.confidence,jdbcType=DOUBLE},
      </if>
      <if test="record.sentiment != null" >
        sentiment = #{record.sentiment,jdbcType=INTEGER},
      </if>
      <if test="record.tag != null" >
        tag = #{record.tag,jdbcType=VARCHAR},
      </if>
      <if test="record.hot != null" >
        hot = #{record.hot,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update song_tag
    set id = #{record.id,jdbcType=INTEGER},
      songId = #{record.songid,jdbcType=VARCHAR},
      positive_prob = #{record.positiveProb,jdbcType=DOUBLE},
      negative_prob = #{record.negativeProb,jdbcType=DOUBLE},
      confidence = #{record.confidence,jdbcType=DOUBLE},
      sentiment = #{record.sentiment,jdbcType=INTEGER},
      tag = #{record.tag,jdbcType=VARCHAR},
      hot = #{record.hot,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ebook.user.model.SongTag" >
    update song_tag
    <set >
      <if test="songid != null" >
        songId = #{songid,jdbcType=VARCHAR},
      </if>
      <if test="positiveProb != null" >
        positive_prob = #{positiveProb,jdbcType=DOUBLE},
      </if>
      <if test="negativeProb != null" >
        negative_prob = #{negativeProb,jdbcType=DOUBLE},
      </if>
      <if test="confidence != null" >
        confidence = #{confidence,jdbcType=DOUBLE},
      </if>
      <if test="sentiment != null" >
        sentiment = #{sentiment,jdbcType=INTEGER},
      </if>
      <if test="tag != null" >
        tag = #{tag,jdbcType=VARCHAR},
      </if>
      <if test="hot != null" >
        hot = #{hot,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ebook.user.model.SongTag" >
    update song_tag
    set songId = #{songid,jdbcType=VARCHAR},
      positive_prob = #{positiveProb,jdbcType=DOUBLE},
      negative_prob = #{negativeProb,jdbcType=DOUBLE},
      confidence = #{confidence,jdbcType=DOUBLE},
      sentiment = #{sentiment,jdbcType=INTEGER},
      tag = #{tag,jdbcType=VARCHAR},
      hot = #{hot,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>



  <update id="updateBatch"  parameterType="java.util.List">
    <foreach collection="list" item="item" separator=";">
      update song_tag
      <set >
        <if test="item.positiveProb != null" >
          positive_prob = #{item.positiveProb,jdbcType=DOUBLE},
        </if>
        <if test="item.negativeProb != null" >
          negative_prob = #{item.negativeProb,jdbcType=DOUBLE},
        </if>
        <if test="item.confidence != null" >
          confidence = #{item.confidence,jdbcType=DOUBLE},
        </if>
        <if test="item.sentiment != null" >
          sentiment = #{item.sentiment,jdbcType=INTEGER},
        </if>
        <if test="item.tag != null" >
          tag = #{item.tag,jdbcType=VARCHAR},
        </if>
        <if test="item.hot != null" >
          hot = #{item.hot,jdbcType=INTEGER},
        </if>
      </set>
      where id = #{item.id,jdbcType=INTEGER}
    </foreach>
  </update>



  <insert id="insertBatch" parameterType="com.ebook.user.model.SongTag" >
    insert into song_tag (songId, positive_prob,
      negative_prob, confidence, sentiment,
      tag, hot)
    values
    <foreach collection="list" item="songTag" separator=",">
    (
     #{songTag.songid,jdbcType=VARCHAR}, #{songTag.positiveProb,jdbcType=DOUBLE},
      #{songTag.negativeProb,jdbcType=DOUBLE}, #{songTag.confidence,jdbcType=DOUBLE}, #{songTag.sentiment,jdbcType=INTEGER},
      #{songTag.tag,jdbcType=VARCHAR}, #{songTag.hot,jdbcType=INTEGER}
      )
    </foreach>
  </insert>


  <select id="selectBySongIds" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from song_tag
    where songId in
    <foreach collection="list" item="songId" index="index" open="(" separator="," close=")">
      #{songId}
    </foreach>
  </select>

</mapper>